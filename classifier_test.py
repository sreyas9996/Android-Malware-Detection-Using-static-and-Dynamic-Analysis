#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Jun  8 10:58:53 2017

@author: sreyasreddy
"""

from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LinearRegression
from sklearn import neighbors
from sklearn.cross_validation import train_test_split 
from sklearn.metrics import accuracy_score,confusion_matrix, classification_report, r2_score
from sklearn.ensemble import RandomForestClassifier, VotingClassifier
import numpy as np
from numpy import genfromtxt
import matplotlib.pyplot as plt

my_data = genfromtxt('result.csv', delimiter=',')
test=my_data[:,1:].astype(int)
test2 = my_data[:,:1].astype(int)

x=test
y=test2.ravel()
#print y
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0)
svc=SVC(kernel="linear")
lr=LinearRegression(normalize=True)
knn=neighbors.KNeighborsClassifier(n_neighbors=5)
rfc=RandomForestClassifier(n_estimators=10)
lor=LogisticRegression(random_state=1)
gnb=GaussianNB()
vot=VotingClassifier(estimators=[('lr',lor),('rf',rfc),('gnb',gnb),('knn',knn)],voting='hard')
lr.fit(x_train,y_train)
svc.fit(x_train,y_train)
knn.fit(x_train,y_train)
rfc.fit(x_train,y_train)
lor.fit(x_train,y_train)
gnb.fit(x_train,y_train)
vot.fit(x_train,y_train)
print ("LogisticRegression", lor.score(x_test,y_test))
print ("GaussianNB", gnb.score(x_test,y_test))
print("RandomForestClassifier ",rfc.score(x_test,y_test))
print ("KNeighborsClassifier ",knn.score(x_test,y_test))
print("SVC ", svc.score(x_test, y_test))
print("LinearRegression ", lr.score(x_test, y_test))
print('VotingClassifier',vot.score(x_test,y_test))
N=7
x=range(N)
y=[lor.score(x_test,y_test),gnb.score(x_test,y_test),rfc.score(x_test,y_test),knn.score(x_test,y_test),svc.score(x_test,y_test),lr.score(x_test,y_test),vot.score(x_test,y_test)]
'''plt.bar(x,y,width)    
plt.xticks(range(len(od1)), ["LogisticRegression","GaussianNB","RandomForestClassifier","KNeighborsClassifier","SVC","LinearRegression","VotingClassifier"],rotation=60,ha="right")
plt.grid(True)
plt.tight_layout()
plt.show().
'''
fig=plt.figure(figsize=(13,7))
plt.bar(x, y, align='edge',width=0.3)
plt.xticks(x, ["LogisticRegression","GaussianNB","RandomForestClassifier","KNeighborsClassifier","SVC","LinearRegression","VotingClassifier"],ha="center")
'''
    plt.xlabel("Permissions")
    plt.ylabel("Frequency of the Perissions")
'''
axes = plt.gca()
axes.set_ylim([0,1])
plt.grid(True)
plt.tight_layout()
plt.show()
fig.savefig("report.png")
#print(classification_report(y_test,y_pred))